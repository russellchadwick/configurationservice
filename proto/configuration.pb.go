// Code generated by protoc-gen-go.
// source: configuration/configuration.proto
// DO NOT EDIT!

/*
Package configuration is a generated protocol buffer package.

It is generated from these files:
	configuration/configuration.proto

It has these top-level messages:
	ConfigurationRequest
	ConfigurationResponse
*/
package configuration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ConfigurationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ConfigurationRequest) Reset()                    { *m = ConfigurationRequest{} }
func (m *ConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationRequest) ProtoMessage()               {}
func (*ConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConfigurationResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigurationResponse) Reset()                    { *m = ConfigurationResponse{} }
func (m *ConfigurationResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationResponse) ProtoMessage()               {}
func (*ConfigurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ConfigurationRequest)(nil), "configuration.ConfigurationRequest")
	proto.RegisterType((*ConfigurationResponse)(nil), "configuration.ConfigurationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Configuration service

type ConfigurationClient interface {
	GetConfiguration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
}

type configurationClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationClient(cc *grpc.ClientConn) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) GetConfiguration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := grpc.Invoke(ctx, "/configuration.Configuration/GetConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Configuration service

type ConfigurationServer interface {
	GetConfiguration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error)
}

func RegisterConfigurationServer(s *grpc.Server, srv ConfigurationServer) {
	s.RegisterService(&_Configuration_serviceDesc, srv)
}

func _Configuration_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ConfigurationServer).GetConfiguration(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Configuration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configuration.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfiguration",
			Handler:    _Configuration_GetConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0x2f, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x47, 0xe1, 0xe9, 0x15, 0x14, 0xe5,
	0x97, 0xe4, 0x0b, 0xf1, 0xa2, 0x08, 0x2a, 0x69, 0x71, 0x89, 0x38, 0x23, 0x0b, 0x04, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xba, 0x5c, 0xa2, 0x68, 0x6a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x61, 0xaa, 0x21, 0x1c, 0xa3, 0x02, 0x2e,
	0x5e, 0x14, 0xe5, 0x42, 0xf1, 0x5c, 0x02, 0xee, 0xa9, 0x25, 0xa8, 0x62, 0xca, 0x7a, 0xa8, 0x8e,
	0xc4, 0xe6, 0x18, 0x29, 0x15, 0xfc, 0x8a, 0x20, 0xae, 0x50, 0x62, 0x48, 0x62, 0x03, 0x7b, 0xd1,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x68, 0x32, 0xae, 0x84, 0x07, 0x01, 0x00, 0x00,
}
